name: Rust CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo test --all-features -- --nocapture

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy -- -D warnings

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install mdBook
        run: cargo install mdbook
      - name: Setup mdBook
        run: |
          if [ ! -d "docs" ]; then
            mkdir docs
            cd docs
            mdbook init
            echo "# ServerForge" > src/chapter_1.md
            echo "# Summary" > src/SUMMARY.md
            echo "" >> src/SUMMARY.md
            echo "- [Chapter 1](./chapter_1.md)" >> src/SUMMARY.md
          fi
      - name: Build API docs
        run: cargo doc --no-deps --all-features
      - name: Build mdBook docs
        run: mdbook build docs
      - name: Combine docs
        run: |
          mkdir -p ./public
          cp -r ./target/doc ./public/api
          cp -r ./docs/book ./public/guide
          echo '<meta http-equiv="refresh" content="0; url=serverforge/index.html">' > ./public/index.html
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.TOKEN }}
          publish_dir: ./public
          force_orphan: true

  publish-dry-run:
    name: Publish Dry Run
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo publish --dry-run

  release:
    name: Release
    needs: [check, fmt, docs, publish-dry-run]
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - uses: Swatinem/rust-cache@v2
      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-gnu
      - name: Package
        run: |
          cd target/x86_64-unknown-linux-gnu/release
          BINARY_NAME="server_forge"
          ARCHIVE_NAME="server_forge-x86_64-unknown-linux-gnu.tar.gz"
          tar czvf "../../../$ARCHIVE_NAME" "$BINARY_NAME"
      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./server_forge-x86_64-unknown-linux-gnu.tar.gz
          asset_name: server_forge-x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/gzip
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: server_forge-x86_64-unknown-linux-gnu
          path: server_forge-x86_64-unknown-linux-gnu.tar.gz

  publish-crates-io:
    name: Publish to crates.io
    needs: [release]
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  linux-packages:
    name: Create Linux Packages
    needs: [ release ]
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y rpm
      - name: Download release artifact
        uses: actions/download-artifact@v3
        with:
          name: server_forge-x86_64-unknown-linux-gnu
          path: ./
      - name: Extract release artifact
        run: tar -xzvf server_forge-x86_64-unknown-linux-gnu.tar.gz
      - name: Create DEB package
        run: |
          # Remove 'v' prefix from version if present
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          
          mkdir -p serverforge_${VERSION}_amd64/DEBIAN
          echo "Package: serverforge
          Version: ${VERSION}
          Architecture: amd64
          Maintainer: Chidozie C. Okafor <chidosiky2015@gmail.com>
          Description: ServerForge - A robust server setup and maintenance tool" > serverforge_${VERSION}_amd64/DEBIAN/control
          mkdir -p serverforge_${VERSION}_amd64/usr/local/bin
          cp server_forge serverforge_${VERSION}_amd64/usr/local/bin/
          dpkg-deb --build serverforge_${VERSION}_amd64
      - name: Create RPM package
        run: |
          # Remove 'v' prefix from version if present
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          
          mkdir -p ~/rpmbuild/{SPECS,SOURCES,BUILD,RPMS,SRPMS}
          cp server_forge ~/rpmbuild/SOURCES/
          echo "Name: serverforge
          Version: ${VERSION}
          Release: 1
          Summary: ServerForge - A robust server setup and maintenance tool
          License: MIT
          
          %description
          ServerForge is a robust server setup and maintenance tool.
          
          %install
          mkdir -p %{buildroot}/usr/local/bin
          cp %{_sourcedir}/server_forge %{buildroot}/usr/local/bin/
          
          %files
          /usr/local/bin/server_forge
          
          %clean
          rm -rf %{buildroot}" > ~/rpmbuild/SPECS/serverforge.spec
          rpmbuild -ba ~/rpmbuild/SPECS/serverforge.spec
      - name: Upload Linux packages
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: |
            ./serverforge_${VERSION}_amd64.deb
            ~/rpmbuild/RPMS/x86_64/serverforge-${VERSION}-1.x86_64.rpm
          asset_name: |
            serverforge_${VERSION}_amd64.deb
            serverforge-${VERSION}-1.x86_64.rpm
          asset_content_type: application/octet-stream